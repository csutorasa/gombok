package main

import (
	"bytes"
	"go/parser"
	"go/token"
	"testing"
)

func TestHasComment(t *testing.T) {
	commands, found := hasComment([]string{"ignore"}, "ignore")
	if len(commands) != 0 || !found {
		t.Errorf("ignore should be found without commands")
	}
}

func TestHasNoComment(t *testing.T) {
	commands, found := hasComment([]string{"random:ignore"}, "ignore")
	if len(commands) != 0 || found {
		t.Errorf("ignore should not be found without commands")
	}
}

func TestProcessFileWithGetter(t *testing.T) {
	fset := token.NewFileSet()
	file, _ := parser.ParseFile(fset, "", `package mypackage
type myStruct struct {
	//go:gombok Getter
	finished bool `+"`"+`gombokGetter:"getter"`+"`"+`
}
`, parser.ParseComments)
	writer, fileImports, err := processFile(fset, "mypackage", "testfile.go", file)
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	var buf bytes.Buffer
	writer.WriteTo(&buf, fileImports)
	code := buf.String()
	if !endlineIgnoreEquals(code, `// Autogenerated file by gombok DO NOT EDIT.
//go:gombok ignore
package mypackage

func (this *myStruct) GetFinished() bool {
	return this.finished
}
`) {
		t.Errorf("Unexpected code %s", code)
	}
}

func TestProcessFileWithCustomTypes(t *testing.T) {
	fset := token.NewFileSet()
	file, _ := parser.ParseFile(fset, "", `package mypackage

import "github.com/test/asd"

type Ad struct { }

//go:gombok Constructor
type myStruct struct {
	ch                *chan *int
	receiveCh         <-chan Ad
	customFunc    func(*[]Ad) *asd.As
	customMap  map[*[]Ad]*asd.As
	customStruct struct{ Test *[]Ad }
	multiple interface {
		Test(int) bool
		Test2(int) bool
	}
	withNames interface{ Test(a int) (r bool) }
	custom    interface{ Test(*[]Ad) *asd.As }
}
`, parser.ParseComments)
	writer, fileImports, err := processFile(fset, "mypackage", "testfile.go", file)
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	var buf bytes.Buffer
	writer.WriteTo(&buf, fileImports)
	code := buf.String()
	if !endlineIgnoreEquals(code, `// Autogenerated file by gombok DO NOT EDIT.
//go:gombok ignore
package mypackage

import "github.com/test/asd"

func NewMyStruct(ch *chan *int, receiveCh <-chan Ad, customFunc func(*[]Ad) *asd.As, customMap map[*[]Ad]*asd.As, customStruct struct{ Test *[]Ad }, multiple interface {
	Test(int) bool
	Test2(int) bool
}, withNames interface{ Test(a int) (r bool) }, custom interface{ Test(*[]Ad) *asd.As }) *myStruct {
	return &myStruct{
		ch: ch,
		receiveCh: receiveCh,
		customFunc: customFunc,
		customMap: customMap,
		customStruct: customStruct,
		multiple: multiple,
		withNames: withNames,
		custom: custom,
	}
}
`) {
		t.Errorf("Unexpected code %s", code)
	}
}

func TestProcessFileWithGenericTypes(t *testing.T) {
	fset := token.NewFileSet()
	file, _ := parser.ParseFile(fset, "", `package mypackage

//go:gombok Constructor
type GenericTypes[c any, d ~int | ~bool] struct {
	arrayValue []*c
}
`, parser.ParseComments)
	writer, fileImports, err := processFile(fset, "mypackage", "testfile.go", file)
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	var buf bytes.Buffer
	writer.WriteTo(&buf, fileImports)
	code := buf.String()
	if !endlineIgnoreEquals(code, `// Autogenerated file by gombok DO NOT EDIT.
//go:gombok ignore
package mypackage

func NewGenericTypes[c any, d ~int | ~bool](arrayValue []*c) *GenericTypes[c, d] {
	return &GenericTypes[c, d]{
		arrayValue: arrayValue,
	}
}
`) {
		t.Errorf("Unexpected code %s", code)
	}
}
