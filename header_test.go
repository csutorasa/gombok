package main

import (
	"bytes"
	"testing"
)

func TestWriteHeader(t *testing.T) {
	var buf bytes.Buffer
	err := writeHeader(&buf, "mypackage")
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	code := buf.String()
	if !endlineIgnoreEquals(code, `// Autogenerated file by gombok DO NOT EDIT.
//go:gombok ignore
package mypackage
`) {
		t.Errorf("Wrong header %s", code)
	}
}

func TestWriteImport(t *testing.T) {
	var buf bytes.Buffer
	err := writeImport(&buf, map[string]bool{"fmt": true}, map[string]*impData{"fmt": {
		HasName: false,
		Name:    "fmt",
		Path:    "fmt",
	}})
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	code := buf.String()
	if !endlineIgnoreEquals(code, `
import "fmt"
`) {
		t.Errorf("Wrong header %s", code)
	}
}

func TestWriteDefaultFmtImport(t *testing.T) {
	var buf bytes.Buffer
	err := writeImport(&buf, map[string]bool{"fmt": true}, map[string]*impData{})
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	code := buf.String()
	if !endlineIgnoreEquals(code, `
import "fmt"
`) {
		t.Errorf("Wrong header %s", code)
	}
}

func TestWriteImports(t *testing.T) {
	var buf bytes.Buffer
	err := writeImport(&buf, map[string]bool{"fmt": true, "mypackage": true}, map[string]*impData{"fmt": {
		HasName: false,
		Name:    "fmt",
		Path:    "fmt",
	}, "mypackage": {
		HasName: true,
		Name:    "mypkg",
		Path:    "github.com/random/mypackage",
	}})
	if err != nil {
		t.Errorf("Should not fail with %s", err.Error())
	}
	code := buf.String()
	if !endlineIgnoreEquals(code, `
import (
	"fmt"
	mypkg "github.com/random/mypackage"
)
`) {
		t.Errorf("Wrong header %s", code)
	}
}
