package main

import (
	"io"
	"text/template"
)

var headerTemplateString string = `{{ .header }}
{{ .ignore }}
package {{ .packageName }}
`
var headerTemplate *template.Template

var importTemplateString string = `
import {{ if .HasName }}{{ .Name }} {{ end }}"{{ .Path }}"
`
var importTemplate *template.Template

var importsTemplateString string = `{{ $imports := .imports }}
import (
{{ range .imports }}	{{ if .HasName }}{{ .Name }} {{ end }}"{{ .Path }}"
{{ end }})
`
var importsTemplate *template.Template

const header string = "// Autogenerated file by gombok DO NOT EDIT."

func init() {
	headerTemplate = loadTemplate("Header", headerTemplateString)
	importTemplate = loadTemplate("Import", importTemplateString)
	importsTemplate = loadTemplate("Imports", importsTemplateString)
}

func writeHeader(wr io.Writer, packageName string) error {
	return headerTemplate.Execute(wr, map[string]interface{}{
		"packageName": packageName,
		"header":      header,
		"ignore":      ignore,
	})
}

func writeImport(wr io.Writer, imports map[string]bool, fileImports map[string]*impData) error {
	if len(imports) == 1 {
		for imp := range imports {
			fileImp := fileImports[imp]
			if imp == "fmt" && fileImp == nil {
				fileImp = &impData{
					HasName: false,
					Name:    "fmt",
					Path:    "fmt",
				}
			}
			return importTemplate.Execute(wr, map[string]interface{}{
				"HasName": fileImp.HasName,
				"Name":    fileImp.Name,
				"Path":    fileImp.Path,
			})
		}
	} else if len(imports) > 1 {
		imps := map[string]*impData{}
		for imp := range imports {
			fileImp := fileImports[imp]
			if imp == "fmt" && fileImp == nil {
				imps["fmt"] = &impData{
					HasName: false,
					Name:    "fmt",
					Path:    "fmt",
				}
			} else {
				imps[imp] = fileImp
			}
		}
		return importsTemplate.Execute(wr, map[string]interface{}{
			"imports": imps,
		})
	}
	return nil
}
